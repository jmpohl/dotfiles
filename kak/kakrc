## Hooks

# case-insensitive search
map global user / '/(?i)' -docstring 'case-insensitive search'
map global user s 's(?i)' -docstring 'case-insensitive select'

# revert breaking changes
map global normal <space> ,
map global normal , <space>
define-command select-or-extend-lines %{
  try %{
    # At least one selection is not full, so select whole lines.
    execute-keys -draft '<a-K>\A^.+\n\z<ret>'
    execute-keys 'x'
  } catch %{
    execute-keys 'J'
  }
}

# add line numbers
hook global KakBegin .* %{addhl global/ number-lines -relative}

# highlight characters in 81st column
hook global BufCreate .*[.](md|tex) %{
    set buffer autowrap_column 80
    addhl regex ^\V{80}(\V) 1:Error
}
hook global WinCreate .*[.](md|tex|rst) %{
    set buffer autowrap_column 80
    autowrap-enable
}

# add brackets highlighting
hook global KakBegin .* %{addhl global/ show-matching}

# X11 (copy/paste)
# ===============
map global user y 'y<a-|>xclip -i<ret>; :echo -color Information "copied selection to X11 clipboard"<ret>' -docstring 'copy to X clipboard'
map global user p '!xclip -o <ret>' -docstring 'paste from X clipboard'

# colors
colorscheme solarized2

# scroll offset
set global scrolloff 12,0

# tabs
# 4-space tabs
set global indentwidth 4
set global tabstop 4

hook global InsertChar \t %{ try %{
      execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
}}
hook global InsertDelete ' ' %{ try %{
      execute-keys -draft 'h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>'
}}

# 2-space tabs for json
#hook global BufSetOption filetype=json %{
hook global BufSetOption filetype=(java|json|tex) %{
    set buffer tabstop 2
    set buffer indentwidth 2
}

# tab indents or tab-completes, depending on context
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        hook -once -always window InsertCompletionHide .* %{
            unmap window insert <tab> <c-n>
            unmap window insert <s-tab> <c-p>
        }
    }
}

hook global KakBegin .* %{
    evaluate-commands %sh{
        path="$PWD"
        while [ "$path" != "$HOME" ] && [ "$path" != "/" ]; do
            if [ -e "./tags" ]; then
                printf "%s\n" "set-option -add current ctagsfiles %{$path/tags}"
                break
            else
                cd ..
                path="$PWD"
            fi
        done
    }
}

hook global BufSetOption filetype=python %{
    map global user d 'ifrom pprint import pprint; import ipdb;ipdb.set_trace(context=30)<esc>' -docstring "debug print statement"
}

# Plugins
# -------

source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload
#plug "connect.kak"
#plug "prelude.kak"
#plug "kakoune-gtags"
#require-module gtags
#map global goto d "<space><a-i>w: gtags-definition <c-r>.<ret>" -docstring 'go to definition'
#map global goto r "<space><a-i>w: gtags-references <c-r>.<ret>" -docstring 'go to references'


plug "kak-lsp/kak-lsp" do %{
    cargo build --release --locked
    cargo install --locked --force --path .
} config %{
    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    # this is not necessary; the `lsp-enable-window` will take care of it
    # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}

    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
    define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
    define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

    define-command nm -docstring 'go to next match from lsp' %{ lsp-goto-next-match }
    define-command pm -docstring 'go to previous match from lsp' %{ lsp-goto-previous-match }
    define-command le -docstring 'lsp-enable' %{ lsp-enable-window }

    map global goto n "<esc>:lsp-find-error --include-warnings<ret>:lsp-hover<ret>" -docstring 'go to next lsp error/warning'
    map global goto N "<esc>:lsp-find-error<ret>:lsp-hover<ret>" -docstring 'go to next lsp error'
    map global goto p "<esc>:lsp-find-error --previous --include-warnings<ret>:lsp-hover<ret>" -docstring 'go to previous lsp error/warning'
    map global goto P "<esc>:lsp-find-error --previous<ret>:lsp-hover<ret>" -docstring 'go to previous lsp error'

    # declare-user-mode lsp
    declare-user-mode lsp-rename
    map global lsp-rename e ':lsp-rename-prompt<ret>' -docstring 'edit'
    map global lsp-rename r ':lsp-rename ' -docstring 'rename'
    map global lsp r ':enter-user-mode lsp-rename<ret>' -docstring 'lsp-rename'
    map global user l ':enter-user-mode lsp<ret>' -docstring 'lsp'

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global KakEnd .* lsp-exit
}

hook global WinSetOption filetype=(json|kotlin|python) %{
    set-option window lsp_auto_highlight_references false
    set-option window lsp_hover_anchor false
    echo -debug "Enabling LSP for filtetype %opt{filetype}"
    lsp-enable-window
    #lsp-auto-hover-enable
    lsp-inline-diagnostics-enable window
    lsp-inlay-diagnostics-enable window
}

plug 'delapouite/kakoune-cd' config %{
    # Suggested mapping
    map global user c ': enter-user-mode cd<ret>' -docstring 'cd'
    # Suggested aliases
    alias global cdb change-directory-current-buffer
    alias global cdr change-directory-project-root
    alias global ecd edit-current-buffer-directory
    alias global pwd print-working-directory
}

plug 'delapouite/kakoune-buffers' config %{
    # Suggested mappings
    map global user b ':enter-buffers-mode<ret>'              -docstring 'buffers…'
    map global user B ':enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'
  
    # Suggested aliases
    alias global bd delete-buffer
    alias global bf buffer-first
    alias global bl buffer-last
    alias global bo buffer-only
    alias global bo! buffer-only-force
}

plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
    map global user K ':kakboard-toggle<ret>' -docstring "toggle clipboard integration"
}
